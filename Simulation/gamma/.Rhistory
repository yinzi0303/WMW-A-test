z_generateNM <- function(comb_xy, num, k){
if (all(comb_xy==comb_xy[1])){
f = rep(comb_xy, k)
}else{
f = tryCatch({
fitNL(comb_xy)
},error = function(e){
rep(comb_xy, k)
})
}
if (length(f)==7){
samp=f[5]*rnorm(num, f[1], f[3]) + (1-f[5])*rnorm(n, f[2], f[4])
}else{
samp=f
}
return(samp)
}
library("MASS")
# normal distribution
z_generateN <- function(comb_xy, num, k){
if (all(comb_xy==comb_xy[1])){
f = rep(comb_xy, k)
}else{
f = tryCatch({
fitdistr(comb_xy,'normal')
},error = function(e){
rep(comb_xy, k)
})
}
if (length(f)==num){
samp=f
}else{
samp=rnorm(num, f[["estimate"]][["mean"]], f[["estimate"]][["sd"]])
}
return(samp)
}
wresult = function(data, k, nperm){
DX = data$X
DY = data$Y
DZ = data$Z
Times = data$Times
wp = list()
wpn = list()
wpnm = list()
emp_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
empn_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
empnm_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
for (d in 1:length(DX)){
wp[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
wpn[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
wpnm[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
for (i in 1:length(DX[[1]])){
X = DX[[d]][[i]]
Y = DY[[d]][[i]]
Z = DZ[[d]][[i]]
m = dim(X)[2]
n = dim(Y)[2]
l = k*(m+n)
N = m+n+l
ALL <- cbind(X, cbind(Y, Z))
wp[[d]][,i] <- apply(ALL, 1, wmwa, m, n, N, nperm)
emp_power[d,i] <- length(which(wp[[d]][,i] <= 0.05)) / Times
Z1 = apply(cbind(X, Y), 1, z_generateN, num=l, k=k)
Z1[which(is.na(Z1))]=0
ALL1 <- cbind(cbind(X,Y), t(Z1))
wpn[[d]][,i] = apply(ALL1, 1, wmwa, m, n, N, nperm)
empn_power[d,i] <- length(which(wpn[[d]][,i] <= 0.05)) / Times
Z2 = apply(cbind(X, Y), 1, z_generateNM, num=l, k=k)
Z2[which(is.na(Z2))]=0
ALL2 <- cbind(cbind(X,Y), t(Z2))
wpnm[[d]][,i] = apply(ALL2, 1, wmwa, m, n, N, nperm)
empnm_power[d,i] <- length(which(wpnm[[d]][,i] <= 0.05)) / Times
}
}
re1 = list(pval=list(wp, wpn, wpnm), power=list(emp_power, empn_power, empnm_power))
return(re1)
}
data = readRDS("data_gamma_eq2.rds")
k = 5; nperm = 1000
DX = data$X
DY = data$Y
DZ = data$Z
Times = data$Times
wp = list()
wpn = list()
wpnm = list()
emp_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
empn_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
empnm_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
for (d in 1:length(DX)){
wp[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
wpn[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
wpnm[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
for (i in 1:length(DX[[1]])){
X = DX[[d]][[i]]
Y = DY[[d]][[i]]
Z = DZ[[d]][[i]]
m = dim(X)[2]
n = dim(Y)[2]
l = k*(m+n)
N = m+n+l
ALL <- cbind(X, cbind(Y, Z))
wp[[d]][,i] <- apply(ALL, 1, wmwa, m, n, N, nperm)
emp_power[d,i] <- length(which(wp[[d]][,i] <= 0.05)) / Times
Z1 = apply(cbind(X, Y), 1, z_generateN, num=l, k=k)
Z1[which(is.na(Z1))]=0
ALL1 <- cbind(cbind(X,Y), t(Z1))
wpn[[d]][,i] = apply(ALL1, 1, wmwa, m, n, N, nperm)
empn_power[d,i] <- length(which(wpn[[d]][,i] <= 0.05)) / Times
Z2 = apply(cbind(X, Y), 1, z_generateNM, num=l, k=k)
Z2[which(is.na(Z2))]=0
ALL2 <- cbind(cbind(X,Y), t(Z2))
wpnm[[d]][,i] = apply(ALL2, 1, wmwa, m, n, N, nperm)
empnm_power[d,i] <- length(which(wpnm[[d]][,i] <= 0.05)) / Times
}
}
re1 = list(pval=list(wp, wpn, wpnm), power=list(emp_power, empn_power, empnm_power))
re_gamma_ueq = re1
re_gamma_eq = re1
saveRDS(re_gamma_eq, "result_gamma_eq2.rds")
data = readRDS("data_gamma_ueq2.rds")
DX = data$X
DY = data$Y
DZ = data$Z
Times = data$Times
wp = list()
wpn = list()
wpnm = list()
emp_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
empn_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
empnm_power = matrix(nrow = length(DX), ncol = length(DX[[1]]))
for (d in 1:length(DX)){
wp[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
wpn[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
wpnm[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
for (i in 1:length(DX[[1]])){
X = DX[[d]][[i]]
Y = DY[[d]][[i]]
Z = DZ[[d]][[i]]
m = dim(X)[2]
n = dim(Y)[2]
l = k*(m+n)
N = m+n+l
ALL <- cbind(X, cbind(Y, Z))
wp[[d]][,i] <- apply(ALL, 1, wmwa, m, n, N, nperm)
emp_power[d,i] <- length(which(wp[[d]][,i] <= 0.05)) / Times
Z1 = apply(cbind(X, Y), 1, z_generateN, num=l, k=k)
Z1[which(is.na(Z1))]=0
ALL1 <- cbind(cbind(X,Y), t(Z1))
wpn[[d]][,i] = apply(ALL1, 1, wmwa, m, n, N, nperm)
empn_power[d,i] <- length(which(wpn[[d]][,i] <= 0.05)) / Times
Z2 = apply(cbind(X, Y), 1, z_generateNM, num=l, k=k)
Z2[which(is.na(Z2))]=0
ALL2 <- cbind(cbind(X,Y), t(Z2))
wpnm[[d]][,i] = apply(ALL2, 1, wmwa, m, n, N, nperm)
empnm_power[d,i] <- length(which(wpnm[[d]][,i] <= 0.05)) / Times
}
}
re1 = list(pval=list(wp, wpn, wpnm), power=list(emp_power, empn_power, empnm_power))
re_gamma_ueq = re1
saveRDS(re_gamma_ueq, "result_gamma_ueq2.rds")
library(R.matlab)
data_plot = function(result, result_2,data,d,flag){
power_t = result[["power"]][["ttest"]][d,1:10]
power_tR = result[["power"]][["ttestR"]][d,1:10]
power_wmw = result[["power"]][["wilx"]][d,1:10]
power_wc = result[["power"]][["welch"]][d,1:10]
power_limma = result[["power"]][["Limma"]][d,1:10]
power_wmwa1 = result_2[["power"]][[1]][d,1:10]
power_wmwag1 = result_2[["power"]][[2]][d,1:10]
power_wmwag2 = result_2[["power"]][[3]][d,1:10]
n = data[["N"]]
n=as.numeric(n)
d2 = data[["Alphay"]][d]-0.5
data1 = data.frame(n=n, power_t=power_t, power_tR=power_tR,power_wmw=power_wmw,power_wc =power_wc,
power_limma=power_limma,power_wmwa1=power_wmwa1,power_wmwag1=power_wmwag1
,power_wmwag2=power_wmwag2)
data1 <- melt(data1,id="n")
Methods = c(rep("t-test",length(n)),rep("t-testR",length(n)),rep("WMW",length(n)),rep("Welch",length(n)),
rep("Limma",length(n)),rep("WMW-A",length(n)),rep("WMW-A-G",length(n)),rep("WMW-A-GMM",length(n)))
colnames(data1) <- c("n","Methods","Power")#更改列名
data1$Methods = Methods
if (flag==1){
data1$type = "balanced(m=n)"
}else{
data1$type = "unbalanced(m=5)"
}
delta = paste('\u03B4',d2,sep="=")
data1$delta = delta
return(data1)
}
############################################################################################################
result4 = readRDS('C:/Users/dell/Desktop/wmwa/WMWA-R/gamma/result_gamma_eq_comp2.rds')
result4_2 = readRDS('C:/Users/dell/Desktop/wmwa/WMWA-R/gamma/result_gamma_eq2.rds')
rawdata = readRDS("C:/Users/dell/Desktop/wmwa/WMWA-R/gamma/data_gamma_eq2.rds")
data1 = data_plot(result4, result4_2, rawdata, d=2, flag=1)
data2 = data_plot(result4, result4_2, rawdata, d=3, flag=1)
library(reshape2)
data_plot = function(result, result_2,data,d,flag){
power_t = result[["power"]][["ttest"]][d,1:10]
power_tR = result[["power"]][["ttestR"]][d,1:10]
power_wmw = result[["power"]][["wilx"]][d,1:10]
power_wc = result[["power"]][["welch"]][d,1:10]
power_limma = result[["power"]][["Limma"]][d,1:10]
power_wmwa1 = result_2[["power"]][[1]][d,1:10]
power_wmwag1 = result_2[["power"]][[2]][d,1:10]
power_wmwag2 = result_2[["power"]][[3]][d,1:10]
n = data[["N"]]
n=as.numeric(n)
d2 = data[["Alphay"]][d]-0.5
data1 = data.frame(n=n, power_t=power_t, power_tR=power_tR,power_wmw=power_wmw,power_wc =power_wc,
power_limma=power_limma,power_wmwa1=power_wmwa1,power_wmwag1=power_wmwag1
,power_wmwag2=power_wmwag2)
data1 <- melt(data1,id="n")
Methods = c(rep("t-test",length(n)),rep("t-testR",length(n)),rep("WMW",length(n)),rep("Welch",length(n)),
rep("Limma",length(n)),rep("WMW-A",length(n)),rep("WMW-A-G",length(n)),rep("WMW-A-GMM",length(n)))
colnames(data1) <- c("n","Methods","Power")#更改列名
data1$Methods = Methods
if (flag==1){
data1$type = "balanced(m=n)"
}else{
data1$type = "unbalanced(m=5)"
}
delta = paste('\u03B4',d2,sep="=")
data1$delta = delta
return(data1)
}
data1 = data_plot(result4, result4_2, rawdata, d=2, flag=1)
data2 = data_plot(result4, result4_2, rawdata, d=3, flag=1)
data3 = data_plot(result4, result4_2, rawdata, d=4, flag=1)
data4 = data_plot(result4, result4_2, rawdata, d=5, flag=1)
datateq = data_plot(result4, result4_2, rawdata, d=1, flag=1)
result5 = readRDS('C:/Users/dell/Desktop/wmwa/WMWA-R/gamma/result_gamma_ueq_comp2.rds')
result5_2 = readRDS('C:/Users/dell/Desktop/wmwa/WMWA-R/gamma/result_gamma_ueq2.rds')
rawdata = readRDS("C:/Users/dell/Desktop/wmwa/WMWA-R/gamma/data_gamma_ueq2.rds")
data5 = data_plot(result5, result5_2,rawdata, d=2, flag=2)
data6 = data_plot(result5, result5_2,rawdata, d=3, flag=2)
data7 = data_plot(result5, result5_2,rawdata, d=4, flag=2)
data8 = data_plot(result5, result5_2,rawdata, d=5, flag=2)
datatueq = data_plot(result5, result5_2,rawdata, d=1, flag=2)
library(dplyr)
data = bind_rows(data1,data2,data3,data4)
data$num = c(rep(1:10,32))
p1=ggplot(data = data,aes(x=n,y=Power,group = Methods,color=Methods))+#,shape=Methods
geom_point(size=0.9)+
geom_line()+#aes(linetype=Methods, color=Methods)
labs(x="n", y="Power (Gamma distribution)", title="")+
ylim(0,1)+facet_grid(type~delta,scales="free",switch="y")+
# xlab("n")+#横坐标名称
# ylab("Power")+#纵坐标名称
theme_bw() +#去掉背景灰色
# scale_x_continuous(breaks=seq(0, 10, 2))+
scale_color_manual(values = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#8787FFFF", "#C77CFF", "#FF61CC"))+
# scale_color_brewer(palette = "Dark2")+
# scale_linetype_manual(values = c("twodash","twodash","twodash","twodash","twodash","solid","solid","solid"))+
# scale_shape_manual(values = c(20,13,1,2,3,4,5,6))+
# theme_set(theme_bw(base_size = 20, base_line_size = 3/lwd_pt, base_rect_size = 3/lwd_pt))+
theme(
plot.title = element_text(hjust = 0.5),
# panel.grid.major=element_line(colour=NA),
# panel.background = element_rect(fill = "transparent",colour = NA),
# plot.background = element_rect(fill = "transparent",colour = NA),
# panel.grid.minor = element_blank(),#以上theme中代码用于去除网格线且保留坐标轴边框
text = element_text(family = "serif"),#设置中文字体的显示
# axis.text.x = element_blank(),
# legend.position = c(.9,.2),#更改图例的位置，放至图内部的左上角
# legend.position = "none",
# legend.title=element_blank(),
legend.position = "None",
axis.text = element_text(face = 'bold',size=10),
axis.title=element_text(face = 'bold',size=10),
strip.text=element_text(face = 'bold',size=10),
legend.text = element_text(face = 'bold',size=10),
legend.title = element_text(face = 'bold',size=10)
# legend.box.background = element_rect(color="black"))#为图例田间边框线
# legend.box.background = element_rect(fill=NA,color = "black",linetype = 1)
)
library(ggplot2)
library(dplyr)
data = bind_rows(data1,data2,data3,data4)
data$num = c(rep(1:10,32))
p1=ggplot(data = data,aes(x=n,y=Power,group = Methods,color=Methods))+#,shape=Methods
geom_point(size=0.9)+
geom_line()+#aes(linetype=Methods, color=Methods)
labs(x="n", y="Power (Gamma distribution)", title="")+
ylim(0,1)+facet_grid(type~delta,scales="free",switch="y")+
# xlab("n")+#横坐标名称
# ylab("Power")+#纵坐标名称
theme_bw() +#去掉背景灰色
# scale_x_continuous(breaks=seq(0, 10, 2))+
scale_color_manual(values = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#8787FFFF", "#C77CFF", "#FF61CC"))+
# scale_color_brewer(palette = "Dark2")+
# scale_linetype_manual(values = c("twodash","twodash","twodash","twodash","twodash","solid","solid","solid"))+
# scale_shape_manual(values = c(20,13,1,2,3,4,5,6))+
# theme_set(theme_bw(base_size = 20, base_line_size = 3/lwd_pt, base_rect_size = 3/lwd_pt))+
theme(
plot.title = element_text(hjust = 0.5),
# panel.grid.major=element_line(colour=NA),
# panel.background = element_rect(fill = "transparent",colour = NA),
# plot.background = element_rect(fill = "transparent",colour = NA),
# panel.grid.minor = element_blank(),#以上theme中代码用于去除网格线且保留坐标轴边框
text = element_text(family = "serif"),#设置中文字体的显示
# axis.text.x = element_blank(),
# legend.position = c(.9,.2),#更改图例的位置，放至图内部的左上角
# legend.position = "none",
# legend.title=element_blank(),
legend.position = "None",
axis.text = element_text(face = 'bold',size=10),
axis.title=element_text(face = 'bold',size=10),
strip.text=element_text(face = 'bold',size=10),
legend.text = element_text(face = 'bold',size=10),
legend.title = element_text(face = 'bold',size=10)
# legend.box.background = element_rect(color="black"))#为图例田间边框线
# legend.box.background = element_rect(fill=NA,color = "black",linetype = 1)
)
library(dplyr)
data = bind_rows(data5,data6,data7,data8)
data$num = c(rep(1:10,32))
p2=ggplot(data = data,aes(x=n,y=Power,group = Methods,color=Methods))+#,shape=Methods
geom_point(size=0.9)+
geom_line()+#aes(linetype=Methods, color=Methods)
labs(x="n", y="Power (Gamma distribution)", title="")+
ylim(0,1)+facet_grid(type~delta,scales="free",switch="y")+
# xlab("n")+#横坐标名称
# ylab("Power")+#纵坐标名称
theme_bw() +#去掉背景灰色
# scale_x_continuous(breaks=seq(0, 10, 2))+
scale_color_manual(values = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#8787FFFF", "#C77CFF", "#FF61CC"))+
# scale_color_brewer(palette = "Dark2")+
scale_linetype_manual(values = c("twodash","twodash","twodash","twodash","twodash","solid","solid","solid"))+
# scale_shape_manual(values = c(20,13,1,2,3,4,5,6))+
# theme_set(theme_bw(base_size = 20, base_line_size = 3/lwd_pt, base_rect_size = 3/lwd_pt))+
theme(
plot.title = element_text(hjust = 0.5),
# panel.grid.major=element_line(colour=NA),
# panel.background = element_rect(fill = "transparent",colour = NA),
# plot.background = element_rect(fill = "transparent",colour = NA),
# panel.grid.minor = element_blank(),#以上theme中代码用于去除网格线且保留坐标轴边框
text = element_text(family = "serif"),#设置中文字体的显示
# axis.text.x = element_blank(),
# legend.position = c(.9,.2),#更改图例的位置，放至图内部的左上角
# legend.position = "none",
# legend.title=element_blank(),
legend.position = "None",
axis.text = element_text(face = 'bold',size=10),
axis.title=element_text(face = 'bold',size=10),
strip.text=element_text(face = 'bold',size=10),
legend.text = element_text(face = 'bold',size=10),
legend.title = element_text(face = 'bold',size=10)
# legend.box.background = element_rect(color="black"))#为图例田间边框线
# legend.box.background = element_rect(fill=NA,color = "black",linetype = 1)
)
library(dplyr)
data = bind_rows(datateq)
data$num = c(rep(1:10,8))
# library(RColorBrewer)
# colors=brewer.pal(name="Set3",8)
p3=ggplot(data = data,aes(x=n,y=Power,group = Methods,color=Methods))+#,shape=Methods
geom_point(size=0.9)+
geom_line()+#aes(linetype=Methods, color=Methods)
labs(x="n", y="Type I error rate (Gamma distribution)", title="")+
ylim(0,1)+facet_grid(type~delta,scales="free",switch="y")+
# xlab("n")+#横坐标名称
# ylab("Power")+#纵坐标名称
theme_bw() +#去掉背景灰色
# scale_x_continuous(breaks=seq(0, 10, 2))+
scale_color_manual(values = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#8787FFFF", "#C77CFF", "#FF61CC"))+
# scale_color_brewer(palette = "Dark2")+
scale_linetype_manual(values = c("twodash","twodash","twodash","twodash","twodash","solid","solid","solid"))+
# scale_shape_manual(values = c(20,13,1,2,3,4,5,6))+
# theme_set(theme_bw(base_size = 20, base_line_size = 3/lwd_pt, base_rect_size = 3/lwd_pt))+
theme(
plot.title = element_text(hjust = 0.5),
# panel.grid.major=element_line(colour=NA),
# panel.background = element_rect(fill = "transparent",colour = NA),
# plot.background = element_rect(fill = "transparent",colour = NA),
# panel.grid.minor = element_blank(),#以上theme中代码用于去除网格线且保留坐标轴边框
text = element_text(family = "serif"),#设置中文字体的显示
# axis.text.x = element_blank(),
# legend.position = c(.9,.2),#更改图例的位置，放至图内部的左上角
# legend.position = "none",
# legend.title=element_blank(),
legend.position = "None",
axis.text = element_text(face = 'bold',size=10),
axis.title=element_text(face = 'bold',size=10),
strip.text=element_text(face = 'bold',size=10),
legend.text = element_text(face = 'bold',size=10),
legend.title = element_text(face = 'bold',size=10)
# legend.box.background = element_rect(color="black"))#为图例田间边框线
# legend.box.background = element_rect(fill=NA,color = "black",linetype = 1)
)
library(dplyr)
data = bind_rows(datatueq)
data$num = c(rep(1:10,8))
p4=ggplot(data = data,aes(x=n,y=Power,group = Methods,color=Methods))+#,shape=Methods
geom_point(size=0.9)+
geom_line()+#aes(linetype=Methods, color=Methods)
labs(x="n", y="Type I error rate (Gamma distribution)", title="")+
ylim(0,1)+facet_grid(type~delta,scales="free",switch="y")+
# xlab("n")+#横坐标名称
# ylab("Power")+#纵坐标名称
theme_bw() +#去掉背景灰色
# scale_x_continuous(breaks=seq(0, 10, 2))+
scale_color_manual(values = c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00A9FF", "#8787FFFF", "#C77CFF", "#FF61CC"))+
# scale_color_brewer(palette = "Dark2")+
scale_linetype_manual(values = c("twodash","twodash","twodash","twodash","twodash","solid","solid","solid"))+
# scale_shape_manual(values = c(20,13,1,2,3,4,5,6))+
# theme_set(theme_bw(base_size = 20, base_line_size = 3/lwd_pt, base_rect_size = 3/lwd_pt))+
theme(
plot.title = element_text(hjust = 0.5),
# panel.grid.major=element_line(colour=NA),
# panel.background = element_rect(fill = "transparent",colour = NA),
# plot.background = element_rect(fill = "transparent",colour = NA),
# panel.grid.minor = element_blank(),#以上theme中代码用于去除网格线且保留坐标轴边框
text = element_text(family = "serif"),#设置中文字体的显示
# axis.text.x = element_blank(),
# legend.position = c(.9,.2),#更改图例的位置，放至图内部的左上角
# legend.position = "none",
# legend.title=element_blank(),
legend.position = "None",
axis.text = element_text(face = 'bold',size=10),
axis.title=element_text(face = 'bold',size=10),
strip.text=element_text(face = 'bold',size=10),
legend.text = element_text(face = 'bold',size=10),
legend.title = element_text(face = 'bold',size=10)
# legend.box.background = element_rect(color="black"))#为图例田间边框线
# legend.box.background = element_rect(fill=NA,color = "black",linetype = 1)
)
pp1 = p1+labs(tag = "A")+theme(text = element_text(family = "serif"))
pp2 = p2+labs(tag = "B")+theme(text = element_text(family = "serif"))
pp3 = p3+labs(tag = "C")+theme(text = element_text(family = "serif"))
pp4 = p4+labs(tag = "D")+theme(text = element_text(family = "serif"))
library(ggpubr)
ggarrange(pp1,pp3,pp2,pp4,common.legend = T,legend = "bottom",widths = c(4,1.3))
resultresult5; result_2=result5_2;data=rawdata
result=result5; result_2=result5_2;data=rawdata
d=2;flag=2
power_t = resd=dult[["power"]][["ttest"]][d,1:10]
power_t = result[["power"]][["ttest"]][d,1:10]
power_tR = result[["power"]][["ttestR"]][d,1:10]
power_wmw = result[["power"]][["wilx"]][d,1:10]
power_wc = result[["power"]][["welch"]][d,1:10]
power_limma = result[["power"]][["Limma"]][d,1:10]
power_wmwa1 = result_2[["power"]][[1]][d,1:10]
power_wmwag1 = result_2[["power"]][[2]][d,1:10]
power_wmwag2 = result_2[["power"]][[3]][d,1:10]
data = readRDS("data_gamma_ueq2.rds")
DX = data$X
DY = data$Y
Times = data$Times
result=list()
result$power = list()
result$power$Limma = matrix(nrow = length(DX), ncol = length(DX[[1]]))
result$power$ttest = matrix(nrow = length(DX), ncol = length(DX[[1]]))
result$power$ttestR = matrix(nrow = length(DX), ncol = length(DX[[1]]))
result$power$welch = matrix(nrow = length(DX), ncol = length(DX[[1]]))
result$power$wilx = matrix(nrow = length(DX), ncol = length(DX[[1]]))
result$p = list()
d=2
result$p$ttest[[d]] = matrix(nrow = Times, ncol = length(DX[[1]]))
i=10
X = DX[[d]][[i]]
Y = DY[[d]][[i]]
m = dim(X)[2]
n = dim(Y)[2]
N = m+n
sml <- c(rep(0,m),rep(1,n))
sml = as.character(sml)
gs <- factor(sml)
ex = cbind(X,Y)
rownames(ex) = 1:Times
colnames(ex) = 1:N
ex = as.data.frame(ex)
Res_ttest = Run_ttest(rawData = ex, gr1= m, gr2=n)
Run_ttest = function(rawData, gr1,gr2){
V = NULL
pVals = NULL
n_sam = dim(rawData)[2]
ave_sam = cumsum(1:n_sam)[n_sam]/n_sam
# for (tj in 1:dim(rawData)[1]){
#   V = rank(rawData[tj,])
#   if( sum(V==ave_sam)==n_sam){pVals[tj] = 0} else {pVals[tj] = t.test(rawData[tj, 1:gr1], rawData[tj, (gr1+1):(gr1+gr2)])$p.value}
#
# }
for (tj in 1:dim(rawData)[1]){
V = rank(rawData[tj,])
pVals[tj] = tryCatch({
t.test(rawData[tj, 1:gr1], rawData[tj, (gr1+1):(gr1+gr2)])$p.value
},error = function(e){
1
})
}
# pVals <- apply(rawData, 1, function(x) {
#   t.test(x[1:gr1], x[(gr1+1):(gr1+gr2)])$p.value
# })
# multiple testing correction
pVals[which(is.na(pVals))]=1
# pVals <- p.adjust(pVals, method = "fdr")
# sigDE <- which(pVals < 0.05)
Wilcox_pVals=pVals
#DE_Quality_rate(sigDE)
## 0.3816953 0.08816031
#DE_Quality_AUC(pVals)
## [1] 0.8320326
return(pVals)
}
Res_ttest = Run_ttest(rawData = ex, gr1= m, gr2=n)
result$p$ttestR[[d]][,i] = Res_ttestR
result$p$ttest[[d]][,i] = Res_ttest
length(which(result$p$ttest[[d]][,i] <= 0.05)) / Times
length(which(result$p$ttest[[d]][,i] < 0.05)) / Times
ggsave("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/Rfig/gamma_powert_fig.png",width = 10,height =6)
