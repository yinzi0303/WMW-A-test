DE_Quality_AUC <- function(golden, pVals) {
  pVals <- pVals[which(pVals >= 0.05) %in% golden$DE | 
                   which(pVals >= 0.05) %in% golden$notDE]
  truth <- rep(1, times = length(pVals));
  truth[which(pVals >= 0.05) %in% golden$DE] = 0;
  pred <- ROCR::prediction(pVals, truth)
  perf <- ROCR::performance(pred, "tpr", "fpr")
  # ROCR::plot(perf)
  aucObj <- ROCR::performance(pred, "auc")
  return(aucObj@y.values[[1]])
}
DE_Quality_rate1 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  tnr = tn/(fp+tn)
  fnr = fn/(tp+fn)
  
  acc <- (tp + tn)/(tp + fn+fp + tn)
  
  return(acc)
}

DE_Quality_rate2 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  precesion <- tp/(tp + fp)
  
  return(precesion)
}

DE_Quality_rate3 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  
  # tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
  # tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
  return(tpr)
}

DE_Quality_rate4 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  
  # tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
  # tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
  return(fpr)
}



#########################################################################################


setwd("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/SCDEG")

data = readRDS("data5.rds")

# result = readRDS("compresult.rds")

myresult = readRDS("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/SCDEG/compresult_nm3.rds")



ntimes = 100

golden = NULL
# golden$DE = DE$DE_gene$monocle
# golden$notDE = DE$UNDE_gene$monocle
# golden$DE = DE$DE_gene$MAST
# golden$notDE = DE$UNDE_gene$MAST
# golden$DE = DE$DE_gene$scde
# golden$notDE = DE$UNDE_gene$scde

#######################################
# DE = readRDS("degene5_sig1")
#######################################
# sigde1 = DE$DE_gene$DESeq
# sigde2 = DE$DE_gene$Limma
# sigde3 = DE$DE_gene$monocle
# sigde4 = DE$DE_gene$MAST
# sigde5 = DE$DE_gene$edgeR
# sigde6 = DE$DE_gene$scde
# 
# sigde = intersect(sigde3, intersect(sigde4, sigde6))
# 
# sigde_all = intersect(intersect(intersect(intersect(sigde1, intersect(sigde2, sigde3)), sigde4), sigde5), sigde6)
# sigde = intersect(sigde_all, logfc)
################################################
deg = read.csv("deg.csv",header = F)
de = match(deg[,1], rownames(data))
sigde = na.omit(de)

# fc_com = intersect(which(abs(fc1)>=1), which(abs(fc2)>=1))
# fc_com = which(abs(fc1)>=1)
# defc = intersect(de, fc_com)

golden$DE = sigde
golden$notDE = setdiff(1:18370, sigde)


ntest = 8
sig_score = 0.01
ngenes = 1:dim(data)[1]

result = list()
result$Res = myresult[["Res"]]

for (t in 1:ntimes){
  for (j in 1:ntest){
    
    result$Res$zingeR[[t]][[j]] = p.adjust(myresult[["Res"]][["zingeR"]][[t]][[j]], method = "fdr")
    result$Res$DEsingle[[t]][[j]] = p.adjust(as.numeric(unlist(myresult[["Res"]][["DEsingle"]][[t]][[j]])), method = "fdr")
    result$Res$ZIAQ[[t]][[j]] = p.adjust(myresult[["Res"]][["ZIAQ"]][[t]][[j]], method = "fdr")
  }
  
}


result$rate1 = list()
result$rate1$zingeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$DEsingle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$ZIAQ = matrix(data = NA, nrow = ntimes, ncol = ntest)



result$rate2 = list()
result$rate2$zingeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$DEsingle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$ZIAQ = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$rate3 = list()
result$rate3$zingeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$DEsingle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$ZIAQ = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$rate4 = list()
result$rate4$zingeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$DEsingle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$ZIAQ = matrix(data = NA, nrow = ntimes, ncol = ntest)



result$auc = list()
result$auc$zingeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$DEsingle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$ZIAQ = matrix(data = NA, nrow = ntimes, ncol = ntest)



for (t in 1:ntimes){
  
  
  
  result$DE_gene$zingeR = list()
  result$DE_gene$DEsingle = list()
  result$DE_gene$ZIAQ = list()

  
  
  result$UNDE_gene$zingeR = list()
  result$UNDE_gene$DEsingle = list()
  result$UNDE_gene$ZIAQ = list()


  
  
  for (j in 1:ntest){
    
    
    result$DE_gene$DEsingle <- which(result$Res$DEsingle[[t]][[j]] < sig_score)
    result$UNDE_gene$DEsingle = setdiff(ngenes,result$DE_gene$DEsingle)
    result$rate1$DEsingle[t,j] = DE_Quality_rate1(golden, result$DE_gene$DEsingle, result$UNDE_gene$DEsingle)
    result$rate2$DEsingle[t,j] = DE_Quality_rate2(golden, result$DE_gene$DEsingle, result$UNDE_gene$DEsingle)
    result$rate3$DEsingle[t,j] = DE_Quality_rate3(golden, result$DE_gene$DEsingle, result$UNDE_gene$DEsingle)
    result$rate4$DEsingle[t,j] = DE_Quality_rate4(golden, result$DE_gene$DEsingle, result$UNDE_gene$DEsingle)
    result$auc$DEsingle[t,j] = DE_Quality_AUC(golden, result$Res$DEsingle[[t]][[j]])
    

    result$DE_gene$ZIAQ <- which(result$Res$ZIAQ[[t]][[j]] < sig_score)
    result$UNDE_gene$ZIAQ = setdiff(ngenes,result$DE_gene$ZIAQ)
    result$rate1$ZIAQ[t,j] = DE_Quality_rate1(golden, result$DE_gene$ZIAQ, result$UNDE_gene$ZIAQ)
    result$rate2$ZIAQ[t,j] = DE_Quality_rate2(golden, result$DE_gene$ZIAQ, result$UNDE_gene$ZIAQ)
    result$rate3$ZIAQ[t,j] = DE_Quality_rate3(golden, result$DE_gene$ZIAQ, result$UNDE_gene$ZIAQ)
    result$rate4$ZIAQ[t,j] = DE_Quality_rate4(golden, result$DE_gene$ZIAQ, result$UNDE_gene$ZIAQ)
    result$auc$ZIAQ[t, j] = DE_Quality_AUC(golden, result$Res$ZIAQ[[t]][[j]])
    
    result$DE_gene$zingeR <- which(result$Res$zingeR[[t]][[j]] < sig_score)
    result$UNDE_gene$zingeR = setdiff(ngenes,result$DE_gene$zingeR)
    result$rate1$zingeR[t,j] = DE_Quality_rate1(golden, result$DE_gene$zingeR, result$UNDE_gene$zingeR)
    result$rate2$zingeR[t,j] = DE_Quality_rate2(golden, result$DE_gene$zingeR, result$UNDE_gene$zingeR)
    result$rate3$zingeR[t,j] = DE_Quality_rate3(golden, result$DE_gene$zingeR, result$UNDE_gene$zingeR)
    result$rate4$zingeR[t,j] = DE_Quality_rate4(golden, result$DE_gene$zingeR, result$UNDE_gene$zingeR)
    result$auc$zingeR[t, j] = DE_Quality_AUC(golden, result$Res$zingeR[[t]][[j]])
    
    
  }
  
}


saveRDS(result,file="compresulteva_n3.rds")


