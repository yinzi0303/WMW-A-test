DE_Quality_AUC <- function(golden, pVals) {
  pVals <- pVals[which(pVals >= 0.05) %in% golden$DE | 
                   which(pVals >= 0.05) %in% golden$notDE]
  truth <- rep(1, times = length(pVals));
  truth[which(pVals >= 0.05) %in% golden$DE] = 0;
  pred <- ROCR::prediction(pVals, truth)
  perf <- ROCR::performance(pred, "tpr", "fpr")
  # ROCR::plot(perf)
  aucObj <- ROCR::performance(pred, "auc")
  return(aucObj@y.values[[1]])
}
DE_Quality_rate1 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  tnr = tn/(fp+tn)
  fnr = fn/(tp+fn)
  
  acc <- (tp + tn)/(tp + fn+fp + tn)
  
  return(acc)
}

DE_Quality_rate2 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  precesion <- tp/(tp + fp)

  return(precesion)
}

DE_Quality_rate3 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  
  # tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
  # tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
  return(tpr)
}

DE_Quality_rate4 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  
  # tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
  # tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
  return(fpr)
}



#########################################################################################


setwd("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/????????")

data = readRDS("data5.rds")

result = readRDS("compresult.rds")

ntimes = 92

golden = NULL
# golden$DE = DE$DE_gene$monocle
# golden$notDE = DE$UNDE_gene$monocle
# golden$DE = DE$DE_gene$MAST
# golden$notDE = DE$UNDE_gene$MAST
# golden$DE = DE$DE_gene$scde
# golden$notDE = DE$UNDE_gene$scde

#######################################
# DE = readRDS("degene5_sig1")
#######################################
# sigde1 = DE$DE_gene$DESeq
# sigde2 = DE$DE_gene$Limma
# sigde3 = DE$DE_gene$monocle
# sigde4 = DE$DE_gene$MAST
# sigde5 = DE$DE_gene$edgeR
# sigde6 = DE$DE_gene$scde
# 
# sigde = intersect(sigde3, intersect(sigde4, sigde6))
# 
# sigde_all = intersect(intersect(intersect(intersect(sigde1, intersect(sigde2, sigde3)), sigde4), sigde5), sigde6)
# sigde = intersect(sigde_all, logfc)
################################################
deg = read.csv("deg.csv",header = F)
de = match(deg[,1], rownames(data))
sigde = na.omit(de)

# fc_com = intersect(which(abs(fc1)>=1), which(abs(fc2)>=1))
# fc_com = which(abs(fc1)>=1)
# defc = intersect(de, fc_com)

golden$DE = sigde
golden$notDE = setdiff(1:18370, sigde)


ntest = 8
sig_score = 0.01
ngenes = 1:length(result[["Res"]][["welch"]][[1]][[1]])


result$rate1 = list()
result$rate1$ROTS = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$monocle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$scde = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$MAST = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$DESeq = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$edgeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$rate2 = list()
result$rate2$ROTS = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$monocle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$scde = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$MAST = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$DESeq = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$edgeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$rate3 = list()
result$rate3$ROTS = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$monocle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$scde = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$MAST = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$DESeq = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$edgeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$rate4 = list()
result$rate4$ROTS = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$monocle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$scde = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$MAST = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$DESeq = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$edgeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)


# result$rate = list()
# result$rate$ROTS = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$DESeq = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$MAST = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$monocle = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$edgeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$scde = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
# result$rate$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$auc = list()
result$auc$ROTS = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$monocle = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$scde = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$MAST = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$DESeq = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$edgeR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)

ngenes = 1:dim(data)[1]

for (t in 1:ntimes){


  # result$DE_gene$ROTS[[t]] = list()
  # result$DE_gene$DESeq[[t]] = list()
  # result$DE_gene$Limma[[t]] = list()
  # result$DE_gene$MAST[[t]] = list()
  # result$DE_gene$monocle[[t]] = list()
  # result$DE_gene$edgeR[[t]] = list()
  # result$DE_gene$wilx[[t]] = list()
  # result$DE_gene$scde[[t]] = list()
  # result$DE_gene$ttest[[t]] = list()
  # result$DE_gene$ttestR[[t]] = list()
  # result$DE_gene$welch[[t]] = list()
  # 
  # 
  # result$UNDE_gene$ROTS[[t]] = list()
  # result$UNDE_gene$DESeq[[t]] = list()
  # result$UNDE_gene$Limma[[t]] = list()
  # result$UNDE_gene$MAST[[t]] = list()
  # result$UNDE_gene$monocle[[t]] = list()
  # result$UNDE_gene$edgeR[[t]] = list()
  # result$UNDE_gene$wilx[[t]] = list()
  # result$UNDE_gene$scde[[t]] = list()
  # result$UNDE_gene$ttest[[t]] = list()
  # result$UNDE_gene$ttestR[[t]] = list()
  # result$UNDE_gene$welch[[t]] = list()

  
  result$DE_gene$ROTS = list()
  result$DE_gene$DESeq = list()
  result$DE_gene$Limma = list()
  result$DE_gene$MAST = list()
  result$DE_gene$monocle = list()
  result$DE_gene$edgeR = list()
  result$DE_gene$wilx = list()
  result$DE_gene$scde = list()
  result$DE_gene$ttest = list()
  result$DE_gene$ttestR = list()
  result$DE_gene$welch = list()
  
  
  result$UNDE_gene$ROTS = list()
  result$UNDE_gene$DESeq = list()
  result$UNDE_gene$Limma = list()
  result$UNDE_gene$MAST = list()
  result$UNDE_gene$monocle = list()
  result$UNDE_gene$edgeR = list()
  result$UNDE_gene$wilx = list()
  result$UNDE_gene$scde = list()
  result$UNDE_gene$ttest = list()
  result$UNDE_gene$ttestR = list()
  result$UNDE_gene$welch = list()




  # for (j in 1:length(n1)){
  #
  #   result$DE_gene$ROTS[[t]] <- which(result$Res$ROTS[[t]] < sig_score)
  #   result$UNDE_gene$ROTS[[t]] = setdiff(1:dim(ex_new)[1],result$DE_gene$ROTS[[t]])
  #   result$rate$ROTS[t,j] = DE_Quality_rate(golden, result$DE_gene$ROTS[[t]], result$Res$ROTS[[t]])
  #   result$auc$ROTS[t, j] = DE_Quality_AUC(golden, result$Res$ROTS[[t]])
  #
  #
  #   result$DE_gene$DESeq <- which(Res_DESeq < sig_score)
  #   result$UNDE_gene$DESeq = setdiff(ngenes,result$DE_gene$DESeq)
  #   result$rate$DESeq[t,j] = DE_Quality_rate(golden, result$DE_gene$DESeq[[t]], result$Res$DESeq[[t]])
  #   result$auc$DESeq[t, j] = DE_Quality_AUC(golden, result$Res$DESeq[[t]])
  #
  #   result$DE_gene$Limma <- which(Res_Limma < sig_score)
  #   result$UNDE_gene$Limma = setdiff(ngenes,result$DE_gene$Limma)
  #   result$rate$Limma[t,j] = DE_Quality_rate(golden, result$DE_gene$Limma[[t]], result$Res$Limma[[t]])
  #   result$auc$Limma[t, j] = DE_Quality_AUC(golden, result$Res$Limma[[t]])
  #
  #   result$DE_gene$MAST <- which(Res_MAST < sig_score)
  #   result$UNDE_gene$MAST = setdiff(ngenes,result$DE_gene$MAST)
  #   result$rate$MAST[t,j] = DE_Quality_rate(golden, result$DE_gene$MAST[[t]], result$Res$MAST[[t]])
  #   result$auc$MAST[t, j] = DE_Quality_AUC(golden, result$Res$MAST[[t]])
  #
  #   result$DE_gene$monocle <- which(Res_monocle < sig_score)
  #   result$UNDE_gene$monocle = setdiff(ngenes,result$DE_gene$monocle)
  #   result$rate$monocle[t,j] = DE_Quality_rate(golden, result$DE_gene$monocle[[t]], result$Res$monocle[[t]])
  #   result$auc$monocle[t, j] = DE_Quality_AUC(golden, result$Res$monocle[[t]])
  #
  #   result$DE_gene$edgeR <- which(Res_edgeR < sig_score)
  #   result$UNDE_gene$edgeR = setdiff(ngenes,result$DE_gene$edgeR)
  #   result$rate$edgeR[t,j] = DE_Quality_rate(golden, result$DE_gene$edgeR[[t]], result$Res$edgeR[[t]])
  #   result$auc$edgeR[t, j] = DE_Quality_AUC(golden, result$Res$edgeR[[t]])
  #
  #   result$DE_gene$wilx <- which(Res_wilx < sig_score)
  #   result$UNDE_gene$wilx = setdiff(ngenes,result$DE_gene$wilx)
  #   result$rate$wilx[t,j] = DE_Quality_rate(golden, result$DE_gene$wilx[[t]], result$Res$wilx[[t]])
  #   result$auc$wilx[t, j] = DE_Quality_AUC(golden, result$Res$wilx[[t]])
  #
  #   result$DE_gene$scde <- which(Res_scde < sig_score)
  #   result$UNDE_gene$scde = setdiff(ngenes,result$DE_gene$scde)
  #   result$rate$scde[t,j] = DE_Quality_rate(golden, result$DE_gene$scde[[t]], result$Res$scde[[t]])
  #   result$auc$scde[t, j] = DE_Quality_AUC(golden, result$Res$scde[[t]])
  #
  #
  # }


  for (j in 1:ntest){

    # result$DE_gene$ROTS[[t]][[j]] <- which(result[["Res"]][["ROTS"]][[t]][[j]] < sig_score)
    # result$UNDE_gene$ROTS[[t]] = setdiff(1:dim(ex_new)[1],result$DE_gene$ROTS[[t]])
    # result$rate1$ROTS[t,j] = DE_Quality_rate1(golden, result$DE_gene$ROTS[[t]], result$UNDE_gene$ROTS[[t]])
    # result$rate2$ROTS[t,j] = DE_Quality_rate2(golden, result$DE_gene$ROTS[[t]], result$UNDE_gene$ROTS[[t]])
    # result$rate3$ROTS[t,j] = DE_Quality_rate3(golden, result$DE_gene$ROTS[[t]], result$UNDE_gene$ROTS[[t]])
    # result$rate4$ROTS[t,j] = DE_Quality_rate4(golden, result$DE_gene$ROTS[[t]], result$UNDE_gene$ROTS[[t]])
    # result$auc$ROTS[t, j] = DE_Quality_AUC(golden, result$Res$ROTS[[t]])


    result$DE_gene$DESeq <- which(result$Res$DESeq[[t]][[j]] < sig_score)
    result$UNDE_gene$DESeq = setdiff(ngenes,result$DE_gene$DESeq)
    result$rate1$DESeq[t,j] = DE_Quality_rate1(golden, result$DE_gene$DESeq, result$UNDE_gene$DESeq)
    result$rate2$DESeq[t,j] = DE_Quality_rate2(golden, result$DE_gene$DESeq, result$UNDE_gene$DESeq)
    result$rate3$DESeq[t,j] = DE_Quality_rate3(golden, result$DE_gene$DESeq, result$UNDE_gene$DESeq)
    result$rate4$DESeq[t,j] = DE_Quality_rate4(golden, result$DE_gene$DESeq, result$UNDE_gene$DESeq)
    result$auc$DESeq[t,j] = DE_Quality_AUC(golden, result$Res$DESeq[[t]][[j]])
    
    pVals = result$Res$Limma[[t]][[j]]
    pVals[which(is.na(pVals))]=1
    result$Res$Limma[[t]][[j]] = pVals 
    result$DE_gene$Limma <- which(result$Res$Limma[[t]][[j]] < sig_score)
    result$UNDE_gene$Limma = setdiff(ngenes,result$DE_gene$Limma)
    result$rate1$Limma[t,j] = DE_Quality_rate1(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$rate2$Limma[t,j] = DE_Quality_rate2(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$rate3$Limma[t,j] = DE_Quality_rate3(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$rate4$Limma[t,j] = DE_Quality_rate4(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$auc$Limma[t, j] = DE_Quality_AUC(golden, result$Res$Limma[[t]][[j]])

    result$DE_gene$MAST <- which(result$Res$MAST[[t]][[j]] < sig_score)
    result$UNDE_gene$MAST = setdiff(ngenes,result$DE_gene$MAST)
    result$rate1$MAST[t,j] = DE_Quality_rate1(golden, result$DE_gene$MAST, result$UNDE_gene$MAST)
    result$rate2$MAST[t,j] = DE_Quality_rate2(golden, result$DE_gene$MAST, result$UNDE_gene$MAST)
    result$rate3$MAST[t,j] = DE_Quality_rate3(golden, result$DE_gene$MAST, result$UNDE_gene$MAST)
    result$rate4$MAST[t,j] = DE_Quality_rate4(golden, result$DE_gene$MAST, result$UNDE_gene$MAST)
    result$auc$MAST[t, j] = DE_Quality_AUC(golden, result$Res$MAST[[t]][[j]])

    result$DE_gene$monocle <- which(result$Res$monocle[[t]][[j]] < sig_score)
    result$UNDE_gene$monocle = setdiff(ngenes,result$DE_gene$monocle)
    result$rate1$monocle[t,j] = DE_Quality_rate1(golden, result$DE_gene$monocle, result$UNDE_gene$monocle)
    result$rate2$monocle[t,j] = DE_Quality_rate2(golden, result$DE_gene$monocle, result$UNDE_gene$monocle)
    result$rate3$monocle[t,j] = DE_Quality_rate3(golden, result$DE_gene$monocle, result$UNDE_gene$monocle)
    result$rate4$monocle[t,j] = DE_Quality_rate4(golden, result$DE_gene$monocle, result$UNDE_gene$monocle)
    result$auc$monocle[t, j] = DE_Quality_AUC(golden, result$Res$monocle[[t]][[j]])

    result$DE_gene$edgeR <- which(result$Res$edgeR[[t]][[j]] < sig_score)
    result$UNDE_gene$edgeR = setdiff(ngenes,result$DE_gene$edgeR)
    result$rate1$edgeR[t,j] = DE_Quality_rate1(golden, result$DE_gene$edgeR, result$UNDE_gene$edgeR)
    result$rate2$edgeR[t,j] = DE_Quality_rate2(golden, result$DE_gene$edgeR, result$UNDE_gene$edgeR)
    result$rate3$edgeR[t,j] = DE_Quality_rate3(golden, result$DE_gene$edgeR, result$UNDE_gene$edgeR)
    result$rate4$edgeR[t,j] = DE_Quality_rate4(golden, result$DE_gene$edgeR, result$UNDE_gene$edgeR)
    result$auc$edgeR[t, j] = DE_Quality_AUC(golden, result$Res$edgeR[[t]][[j]])

    result$DE_gene$wilx <- which(result$Res$wilx[[t]][[j]] < sig_score)
    result$UNDE_gene$wilx = setdiff(ngenes,result$DE_gene$wilx)
    result$rate1$wilx[t,j] = DE_Quality_rate1(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$rate2$wilx[t,j] = DE_Quality_rate2(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$rate3$wilx[t,j] = DE_Quality_rate3(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$rate4$wilx[t,j] = DE_Quality_rate4(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$auc$wilx[t, j] = DE_Quality_AUC(golden, result$Res$wilx[[t]][[j]])

    result$DE_gene$scde <- which(result$Res$scde[[t]][[j]] < sig_score)
    result$UNDE_gene$scde = setdiff(ngenes,result$DE_gene$scde)
    result$rate1$scde[t,j] = DE_Quality_rate1(golden, result$DE_gene$scde, result$UNDE_gene$scde)
    result$rate2$scde[t,j] = DE_Quality_rate2(golden, result$DE_gene$scde, result$UNDE_gene$scde)
    result$rate3$scde[t,j] = DE_Quality_rate3(golden, result$DE_gene$scde, result$UNDE_gene$scde)
    result$rate4$scde[t,j] = DE_Quality_rate4(golden, result$DE_gene$scde, result$UNDE_gene$scde)
    result$auc$scde[t, j] = DE_Quality_AUC(golden, result$Res$scde[[t]][[j]])


    result$DE_gene$ttest <- which(result$Res$ttest[[t]][[j]] < sig_score)
    result$UNDE_gene$ttest = setdiff(ngenes,result$DE_gene$ttest)
    result$rate1$ttest[t,j] = DE_Quality_rate1(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$rate2$ttest[t,j] = DE_Quality_rate2(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$rate3$ttest[t,j] = DE_Quality_rate3(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$rate4$ttest[t,j] = DE_Quality_rate4(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$auc$ttest[t, j] = DE_Quality_AUC(golden, result$Res$ttest[[t]][[j]])


    result$DE_gene$ttestR <- which(result$Res$ttestR[[t]][[j]] < sig_score)
    result$UNDE_gene$ttestR = setdiff(ngenes,result$DE_gene$ttestR)
    result$rate1$ttestR[t,j] = DE_Quality_rate1(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$rate2$ttestR[t,j] = DE_Quality_rate2(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$rate3$ttestR[t,j] = DE_Quality_rate3(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$rate4$ttestR[t,j] = DE_Quality_rate4(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$auc$ttestR[t, j] = DE_Quality_AUC(golden, result$Res$ttestR[[t]][[j]])


    result$DE_gene$welch <- which(result$Res$welch[[t]][[j]] < sig_score)
    result$UNDE_gene$welch = setdiff(ngenes,result$DE_gene$welch)
    result$rate1$welch[t,j] = DE_Quality_rate1(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$rate2$welch[t,j] = DE_Quality_rate2(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$rate3$welch[t,j] = DE_Quality_rate3(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$rate4$welch[t,j] = DE_Quality_rate4(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$auc$welch[t, j] = DE_Quality_AUC(golden, result$Res$welch[[t]][[j]])

  }

}


myresult = readRDS("dg-7/WMWANNMresult.rds")

result$Res$WMWANBM = myresult[["Res"]][["WMWANNM"]]

ntimes = length(myresult[["Res"]][["WMWANNM"]])

ntest=8

for (t in 1:ntimes){

  for (j in 1:ntest){


    result$Res$WMWANBM[[t]][[j]] = p.adjust(myresult[["Res"]][["WMWANNM"]][[t]][[j]], method = "fdr")
  }

}


result$rate1$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$rate2$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$rate3$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$rate4$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$auc$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)

ntest = 8
ngenes = 1:length(result[["Res"]][["welch"]][[1]][[1]])

for (t in 1:ntimes){
  
  result$DE_gene$WMWANBM = list()
  
  result$UNDE_gene$WMWANBM = list()

  
  
  for (j in 1:ntest){
    
   
    result$DE_gene$WMWANBM <- which(result$Res$WMWANBM[[t]][[j]] < sig_score)
    result$UNDE_gene$WMWANBM = setdiff(ngenes,result$DE_gene$WMWANBM)
    result$rate1$WMWANBM[t,j] = DE_Quality_rate1(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
    result$rate2$WMWANBM[t,j] = DE_Quality_rate2(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
    result$rate3$WMWANBM[t,j] = DE_Quality_rate3(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
    result$rate4$WMWANBM[t,j] = DE_Quality_rate4(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
    result$auc$WMWANBM[t,j] = DE_Quality_AUC(golden, result$Res$WMWANBM[[t]][[j]])
    
    
  }
  
}


# saveRDS(result, "compresulteva5_5.rds")


# mauc = matrix(nr=10, nc=ntest)
# mrate1 = matrix(nr=10, nc=ntest)
# mrate2 = matrix(nr=10, nc=ntest)
# mrate3 = matrix(nr=10, nc=ntest)
# mrate4 = matrix(nr=10, nc=ntest)
# 
# 
# for (i in 1:ntest){
#   mauc[1,i] = mean(result$auc$DESeq[,i])
#   mauc[2,i] = mean(result$auc$Limma[,i])
#   mauc[3,i] = mean(result$auc$MAST[,i])
#   mauc[4,i] = mean(result$auc$monocle[,i])
#   mauc[5,i] = mean(result$auc$edgeR[,i])
#   mauc[6,i] = mean(result$auc$scde[,i])
#   mauc[7,i] = mean(result$auc$wilx[,i])
#   mauc[8,i] = mean(result$auc$ttest[,i])
#   mauc[9,i] = mean(result$auc$ttestR[,i])
#   mauc[10,i] = mean(result$auc$welch[,i])
#   
#   mrate1[1,i] = mean(result$rate1$DESeq[,i])
#   mrate1[2,i] = mean(result$rate1$Limma[,i])
#   mrate1[3,i] = mean(result$rate1$MAST[,i])
#   mrate1[4,i] = mean(result$rate1$monocle[,i])
#   mrate1[5,i] = mean(result$rate1$edgeR[,i])
#   mrate1[6,i] = mean(result$rate1$scde[,i])
#   mrate1[7,i] = mean(result$rate1$wilx[,i])
#   mrate1[8,i] = mean(result$rate1$ttest[,i])
#   mrate1[9,i] = mean(result$rate1$ttestR[,i])
#   mrate1[10,i] = mean(result$rate1$welch[,i])
#   
#   
#   mrate2[1,i] = mean(result$rate2$DESeq[,i])
#   mrate2[2,i] = mean(result$rate2$Limma[,i])
#   mrate2[3,i] = mean(result$rate2$MAST[,i])
#   mrate2[4,i] = mean(result$rate2$monocle[,i])
#   mrate2[5,i] = mean(result$rate2$edgeR[,i])
#   mrate2[6,i] = mean(result$rate2$scde[,i])
#   mrate2[7,i] = mean(result$rate2$wilx[,i])
#   mrate2[8,i] = mean(result$rate2$ttest[,i])
#   mrate2[9,i] = mean(result$rate2$ttestR[,i])
#   mrate2[10,i] = mean(result$rate2$welch[,i])
#   
#   
#   mrate3[1,i] = mean(result$rate3$DESeq[,i])
#   mrate3[2,i] = mean(result$rate3$Limma[,i])
#   mrate3[3,i] = mean(result$rate3$MAST[,i])
#   mrate3[4,i] = mean(result$rate3$monocle[,i])
#   mrate3[5,i] = mean(result$rate3$edgeR[,i])
#   mrate3[6,i] = mean(result$rate3$scde[,i])
#   mrate3[7,i] = mean(result$rate3$wilx[,i])
#   mrate3[8,i] = mean(result$rate3$ttest[,i])
#   mrate3[9,i] = mean(result$rate3$ttestR[,i])
#   mrate3[10,i] = mean(result$rate3$welch[,i])
# 
# 
#   mrate4[1,i] = mean(result$rate4$DESeq[,i])
#   mrate4[2,i] = mean(result$rate4$Limma[,i])
#   mrate4[3,i] = mean(result$rate4$MAST[,i])
#   mrate4[4,i] = mean(result$rate4$monocle[,i])
#   mrate4[5,i] = mean(result$rate4$edgeR[,i])
#   mrate4[6,i] = mean(result$rate4$scde[,i])
#   mrate4[7,i] = mean(result$rate4$wilx[,i])
#   mrate4[8,i] = mean(result$rate4$ttest[,i])
#   mrate4[9,i] = mean(result$rate4$ttestR[,i])
#   mrate4[10,i] = mean(result$rate4$welch[,i])
#   
#   
#   
# 
# }
# 
