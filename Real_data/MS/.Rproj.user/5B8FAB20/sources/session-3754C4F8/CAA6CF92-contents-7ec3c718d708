DE_Quality_AUC <- function(golden, pVals) {
  pVals <- pVals[which(pVals >= 0.05) %in% golden$DE | 
                   which(pVals >= 0.05) %in% golden$notDE]
  truth <- rep(1, times = length(pVals));
  truth[which(pVals >= 0.05) %in% golden$DE] = 0;
  pred <- ROCR::prediction(pVals, truth)
  perf <- ROCR::performance(pred, "tpr", "fpr")
  # ROCR::plot(perf)
  aucObj <- ROCR::performance(pred, "auc")
  return(aucObj@y.values[[1]])
}
DE_Quality_rate1 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  tnr = tn/(fp+tn)
  fnr = fn/(tp+fn)
  
  acc <- (tp + tn)/(tp + fn+fp + tn)
  
  return(acc)
}

DE_Quality_rate2 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  precesion <- tp/(tp + fp)
  
  return(precesion)
}

DE_Quality_rate3 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  
  # tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
  # tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
  return(tpr)
}

DE_Quality_rate4 <- function(golden, sigDE, unsigDE) {
  tp <- sum(golden$DE %in% sigDE)
  fp <- sum(golden$notDE %in% sigDE)
  tn <- sum(golden$notDE %in% unsigDE)
  fn <- sum(golden$DE %in% unsigDE)
  
  tpr <- tp/(tp + fn)
  fpr <- fp/(fp + tn)
  
  # tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
  # tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
  return(fpr)
}



#########################################################################################


setwd("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/RNA-seq/GSE54456")
dataset = readRDS('GSE54456.rds') #count data, 1410*60
data = dataset[["expr"]]

result = readRDS("compresult_54456.rds")
DEG = read.csv("deg.csv")
DE = match(DEG[,1], rownames(data))

# DEG = readRDS("DE_all_54456_2.rds")
# # DE = union(DEG$de1, union(DEG$de2,union(DEG$de3,union(DEG$de4,DEG$de5))))
# DE = DEG$de1

ntimes = 100

golden = NULL

sigde = DE
golden$DE = sigde
golden$notDE = setdiff(1:dim(data)[1], sigde)


ntest = 1
sig_score = 0.01
ngenes = 1:dim(data)[1]


result$rate1 = list()
result$rate1$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$rate2 = list()
result$rate2$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)

result$rate3 = list()
result$rate3$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$rate4 = list()
result$rate4$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)


result$auc = list()
result$auc$Limma = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$wilx = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$ttest = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$ttestR = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$welch = matrix(data = NA, nrow = ntimes, ncol = ntest)



for (t in 1:ntimes){
  
  
  
  result$DE_gene$Limma = list()
  result$DE_gene$wilx = list()
  result$DE_gene$ttest = list()
  result$DE_gene$ttestR = list()
  result$DE_gene$welch = list()
  
  
  result$UNDE_gene$Limma = list()
  result$UNDE_gene$wilx = list()
  result$UNDE_gene$ttest = list()
  result$UNDE_gene$ttestR = list()
  result$UNDE_gene$welch = list()
  
  
  for (j in 1:ntest){
    
    result$DE_gene$Limma <- which(result$Res$Limma[[t]][[j]] < sig_score)
    result$UNDE_gene$Limma = setdiff(ngenes,result$DE_gene$Limma)
    result$rate1$Limma[t,j] = DE_Quality_rate1(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$rate2$Limma[t,j] = DE_Quality_rate2(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$rate3$Limma[t,j] = DE_Quality_rate3(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$rate4$Limma[t,j] = DE_Quality_rate4(golden, result$DE_gene$Limma, result$UNDE_gene$Limma)
    result$auc$Limma[t, j] = DE_Quality_AUC(golden, result$Res$Limma[[t]][[j]])
    
  
    
    result$DE_gene$wilx <- which(result$Res$wilx[[t]][[j]] < sig_score)
    result$UNDE_gene$wilx = setdiff(ngenes,result$DE_gene$wilx)
    result$rate1$wilx[t,j] = DE_Quality_rate1(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$rate2$wilx[t,j] = DE_Quality_rate2(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$rate3$wilx[t,j] = DE_Quality_rate3(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$rate4$wilx[t,j] = DE_Quality_rate4(golden, result$DE_gene$wilx, result$UNDE_gene$wilx)
    result$auc$wilx[t, j] = DE_Quality_AUC(golden, result$Res$wilx[[t]][[j]])
    
    
    
    result$DE_gene$ttest <- which(result$Res$ttest[[t]][[j]] < sig_score)
    result$UNDE_gene$ttest = setdiff(ngenes,result$DE_gene$ttest)
    result$rate1$ttest[t,j] = DE_Quality_rate1(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$rate2$ttest[t,j] = DE_Quality_rate2(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$rate3$ttest[t,j] = DE_Quality_rate3(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$rate4$ttest[t,j] = DE_Quality_rate4(golden, result$DE_gene$ttest, result$UNDE_gene$ttest)
    result$auc$ttest[t, j] = DE_Quality_AUC(golden, result$Res$ttest[[t]][[j]])
    
    
    result$DE_gene$ttestR <- which(result$Res$ttestR[[t]][[j]] < sig_score)
    result$UNDE_gene$ttestR = setdiff(ngenes,result$DE_gene$ttestR)
    result$rate1$ttestR[t,j] = DE_Quality_rate1(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$rate2$ttestR[t,j] = DE_Quality_rate2(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$rate3$ttestR[t,j] = DE_Quality_rate3(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$rate4$ttestR[t,j] = DE_Quality_rate4(golden, result$DE_gene$ttestR, result$UNDE_gene$ttestR)
    result$auc$ttestR[t, j] = DE_Quality_AUC(golden, result$Res$ttestR[[t]][[j]])
    
    
    result$DE_gene$welch <- which(result$Res$welch[[t]][[j]] < sig_score)
    result$UNDE_gene$welch = setdiff(ngenes,result$DE_gene$welch)
    result$rate1$welch[t,j] = DE_Quality_rate1(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$rate2$welch[t,j] = DE_Quality_rate2(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$rate3$welch[t,j] = DE_Quality_rate3(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$rate4$welch[t,j] = DE_Quality_rate4(golden, result$DE_gene$welch, result$UNDE_gene$welch)
    result$auc$welch[t, j] = DE_Quality_AUC(golden, result$Res$welch[[t]][[j]])
    
  }
  
}

saveRDS(result, "result_54456.rds")


