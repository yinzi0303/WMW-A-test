}
}
for (i in 1:dim(ggpwmwa1)[2]){
de_gwmwa1 = NULL
de_gwmwa1_2 = NULL
unde_gwmwa1 = NULL
unde_gwmwa1_2 = NULL
de_gwmwa1 = which(ppwmwa1[i,]<=alpha)
de_gwmwa1_2 = which(ppwmwa1_2[i,]<=alpha)
unde_gwmwa1 = which(ppwmwa1[i,]>alpha)
unde_gwmwa1_2 = which(ppwmwa1_2[i,]>alpha)
pow_gwmwa1[r,i] = length(intersect(de,de_gwmwa1)) / length(de)
pow_gwmwa1_2[r,i] = length(intersect(de,de_gwmwa1_2)) / length(de)
ppwmwa1[i,][which(is.na(ppwmwa1[i,]))]=1
ppwmwa1_2[i,][which(is.na(ppwmwa1_2[i,]))]=1
a1[r,i] = DE_Quality_AUC(ppwmwa1[i,])
a2[r,i] = DE_Quality_AUC(ppwmwa1_2[i,])
# t1[r,i] = DE_Quality_rate1(de_gwmwa1, unde_gwmwa1)
# t2[r,i] = DE_Quality_rate2(de_gwmwa1, unde_gwmwa1)
# t3[r,i] = DE_Quality_rate3(de_gwmwa1, unde_gwmwa1)
# t4[r,i] = DE_Quality_rate4(de_gwmwa1, unde_gwmwa1)
s1[r,i] = DE_Quality_rate1(de_gwmwa1_2, unde_gwmwa1_2)
s2[r,i] = DE_Quality_rate2(de_gwmwa1_2, unde_gwmwa1_2)
s3[r,i] = DE_Quality_rate3(de_gwmwa1_2, unde_gwmwa1_2)
s4[r,i] = DE_Quality_rate4(de_gwmwa1_2, unde_gwmwa1_2)
# at[r,i] = DE_Quality_AUC(ppwmwa1[i,])
# as[r,i] = DE_Quality_AUC(ppwmwa1_2[i,])
}
}
s <- list()
s <- list(a1=a1, a2=a2,s1=s2,s2=s2,s3=s3,s4=s4)
return(s)
}
ntimes = 100
result$rate1$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
alpha = 0.01
# setwd("C:/Users/dell/Desktop/wmwa/Z/差异基因")
myresult = readMat("E:/downloads/scresult/power/result_scG1norm_data5_perm_2k.mat")
ntest = 8
sig_score = 0.01
ngenes = length(golden[["Res"]][["monocle"]])
ggpwmwa1 = myresult[["wmwaG1.1"]]
ggpwmwa1_2 = myresult[["wmwaG1.1.2"]]
ntimes = dim(ggpwmwa1)[1]
re_G1_norm = eva(ggpwmwa1, ggpwmwa1_2, golden$DE, alpha)
result$rate1$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_1G_norm = re_G1_norm[["s1"]]
result$rate2$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_1G_norm = re_G1_norm[["s2"]]
result$rate3$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_1G_norm = re_G1_norm[["s3"]]
result$rate4$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_1G_norm = re_G1_norm[["s4"]]
result$auc$WMWA_1G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_1G_norm = re_G1_norm[["a2"]]
myresult = readMat("E:/downloads/scresult/power/result_scG2norm_data5_perm_2k.mat")
ntest = 8
ngenes = length(golden[["Res"]][["monocle"]])
ggpwmwa1 = myresult[["wmwaG2.1"]]
ggpwmwa1_2 = myresult[["wmwaG2.1.2"]]
ntimes = dim(ggpwmwa1)[1]
re_G2_norm = eva(ggpwmwa1, ggpwmwa1_2, golden$DE, alpha)
result$rate1$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_2G_norm = re_G2_norm[["s1"]]
result$rate2$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_2G_norm = re_G2_norm[["s2"]]
result$rate3$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_2G_norm = re_G2_norm[["s3"]]
result$rate4$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_2G_norm = re_G2_norm[["s4"]]
result$auc$WMWA_2G_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_2G_norm = re_G2_norm[["a2"]]
myresult = readMat("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/sc/result_scNNcount_data5_perm_2k.mat")
# myresult = readMat("E:/downloads/scresult/power/result_scNNcount_data5_perm_2k.mat")
ntest = 8
ngenes = length(golden[["Res"]][["monocle"]])
ggpwmwa1 = myresult[["wmwaNN1"]]
ggpwmwa1_2 = myresult[["wmwaNN1.2"]]
ntimes = dim(ggpwmwa1)[1]
re_NN_count = eva(ggpwmwa1, ggpwmwa1_2, golden$DE, alpha)
result$rate1$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_NN_norm = re_NN_count[["s1"]]
result$rate2$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_NN_norm = re_NN_count[["s2"]]
result$rate3$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_NN_norm = re_NN_count[["s3"]]
result$rate4$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_NN_norm = re_NN_count[["s4"]]
result$auc$WMWA_NN_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_NN_norm = re_NN_count[["a2"]]
myresult = readMat("E:/downloads/scresult/power/result_sctrue_data5_perm_2k.mat")
ntest = 8
ngenes = length(golden[["Res"]][["monocle"]])
ggpwmwa1 = myresult[["ggpwmwa1"]]
ggpwmwa1_2 = myresult[["ggpwmwa1.2"]]
ntimes = dim(ggpwmwa1)[1]
re_true_norm = eva(ggpwmwa1, ggpwmwa1_2, golden$DE, alpha)
result$rate1$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_norm = re_true_norm[["s1"]]
result$rate2$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_norm = re_true_norm[["s2"]]
result$rate3$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_norm = re_true_norm[["s3"]]
result$rate4$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_norm = re_true_norm[["s4"]]
result$auc$WMWA_norm = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_norm =  re_true_norm[["a2"]]
myresult = readMat("C:/Users/dell/Desktop/wmwa/Z/lunwen_1g/sc/result_sctruecount_data5_perm_2k.mat")
# myresult = readMat("E:/downloads/scresult/power/result_sctruecount_data5_perm_2k.mat")
ntest = 8
ngenes = length(golden[["Res"]][["monocle"]])
ggpwmwa1 = myresult[["ggpwmwa1"]]
ggpwmwa1_2 = myresult[["ggpwmwa1.2"]]
ntimes = dim(ggpwmwa1)[1]
re_true_count = eva(ggpwmwa1, ggpwmwa1_2, golden$DE, alpha)
result$rate1$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate1$WMWA_count = re_true_count[["s1"]]
result$rate2$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWA_count = re_true_count[["s2"]]
result$rate3$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWA_count = re_true_count[["s3"]]
result$rate4$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWA_count = re_true_count[["s4"]]
result$auc$WMWA_count = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWA_count =re_true_count[["a2"]]
View(result)
myresult = readRDS("dg-7/WMWANNMresult.rds")
result$Res$WMWANBM = myresult[["Res"]][["WMWANNM"]]
ntimes = length(myresult[["Res"]][["WMWANNM"]])
ntest=8
for (t in 1:ntimes){
for (j in 1:ntest){
result$Res$WMWANBM[[t]][[j]] = p.adjust(myresult[["Res"]][["WMWANNM"]][[t]][[j]], method = "fdr")
}
}
result$rate1$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate2$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate3$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$rate4$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
result$auc$WMWANBM = matrix(data = NA, nrow = ntimes, ncol = ntest)
ntest = 8
ngenes = 1:length(result[["Res"]][["welch"]][[1]][[1]])
for (t in 1:ntimes){
result$DE_gene$WMWANBM = list()
result$UNDE_gene$WMWANBM = list()
for (j in 1:ntest){
result$DE_gene$WMWANBM <- which(result$Res$WMWANBM[[t]][[j]] < sig_score)
result$UNDE_gene$WMWANBM = setdiff(ngenes,result$DE_gene$WMWANBM)
result$rate1$WMWANBM[t,j] = DE_Quality_rate1(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$rate2$WMWANBM[t,j] = DE_Quality_rate2(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$rate3$WMWANBM[t,j] = DE_Quality_rate3(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$rate4$WMWANBM[t,j] = DE_Quality_rate4(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$auc$WMWANBM[t,j] = DE_Quality_AUC(golden, result$Res$WMWANBM[[t]][[j]])
}
}
DE_Quality_AUC <- function(golden, pVals) {
pVals <- pVals[which(pVals >= 0.05) %in% golden$DE |
which(pVals >= 0.05) %in% golden$notDE]
truth <- rep(1, times = length(pVals));
truth[which(pVals >= 0.05) %in% golden$DE] = 0;
pred <- ROCR::prediction(pVals, truth)
perf <- ROCR::performance(pred, "tpr", "fpr")
# ROCR::plot(perf)
aucObj <- ROCR::performance(pred, "auc")
return(aucObj@y.values[[1]])
}
DE_Quality_rate1 <- function(golden, sigDE, unsigDE) {
tp <- sum(golden$DE %in% sigDE)
fp <- sum(golden$notDE %in% sigDE)
tn <- sum(golden$notDE %in% unsigDE)
fn <- sum(golden$DE %in% unsigDE)
tpr <- tp/(tp + fn)
fpr <- fp/(fp + tn)
tnr = tn/(fp+tn)
fnr = fn/(tp+fn)
acc <- (tp + tn)/(tp + fn+fp + tn)
return(acc)
}
DE_Quality_rate2 <- function(golden, sigDE, unsigDE) {
tp <- sum(golden$DE %in% sigDE)
fp <- sum(golden$notDE %in% sigDE)
tn <- sum(golden$notDE %in% unsigDE)
fn <- sum(golden$DE %in% unsigDE)
precesion <- tp/(tp + fp)
return(precesion)
}
DE_Quality_rate3 <- function(golden, sigDE, unsigDE) {
tp <- sum(golden$DE %in% sigDE)
fp <- sum(golden$notDE %in% sigDE)
tn <- sum(golden$notDE %in% unsigDE)
fn <- sum(golden$DE %in% unsigDE)
tpr <- tp/(tp + fn)
fpr <- fp/(fp + tn)
# tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
# tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
return(tpr)
}
DE_Quality_rate4 <- function(golden, sigDE, unsigDE) {
tp <- sum(golden$DE %in% sigDE)
fp <- sum(golden$notDE %in% sigDE)
tn <- sum(golden$notDE %in% unsigDE)
fn <- sum(golden$DE %in% unsigDE)
tpr <- tp/(tp + fn)
fpr <- fp/(fp + tn)
# tpp <- sum(golden$DE %in% sigDE)/length(golden$DE)
# tnp <- sum(golden$notDE %in% unsigDE)/length(golden$notDE)
return(fpr)
}
for (t in 1:ntimes){
result$DE_gene$WMWANBM = list()
result$UNDE_gene$WMWANBM = list()
for (j in 1:ntest){
result$DE_gene$WMWANBM <- which(result$Res$WMWANBM[[t]][[j]] < sig_score)
result$UNDE_gene$WMWANBM = setdiff(ngenes,result$DE_gene$WMWANBM)
result$rate1$WMWANBM[t,j] = DE_Quality_rate1(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$rate2$WMWANBM[t,j] = DE_Quality_rate2(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$rate3$WMWANBM[t,j] = DE_Quality_rate3(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$rate4$WMWANBM[t,j] = DE_Quality_rate4(golden, result$DE_gene$WMWANBM, result$UNDE_gene$WMWANBM)
result$auc$WMWANBM[t,j] = DE_Quality_AUC(golden, result$Res$WMWANBM[[t]][[j]])
}
}
saveRDS(result, "compresulteva5_1.rds")
result[["rate3"]][["ROTS"]] = NULL
result[["rate4"]][["ROTS"]] = NULL
# name = ls(result[[4]])
name = c("monocle","SCDE","MAST","DESeq","Limma","edgeR","ttest","ttestR","Welch","WMW","WMW-A-1G","WMW-A-2G",
"WMW-A-NB","WMW-A-NBM","WMW-A(normalized)","WMW-A(count)")
data_comb = NULL
for(r in 1:8){
compb = matrix(NA, ncol=10,nrow = 92)
for (i in 1:10){
comp = matrix(unlist(result[["rate3"]][[i]][,r]), ncol=1)
compb[,i] = comp
}
colnames(compb) = name[1:10]
myb= matrix(NA, ncol=6,nrow = 100)
for (i in 11:16){
my = matrix(unlist(result[["rate3"]][[i]][,r]), ncol=1)
myb[,i-10] = my
}
colnames(myb) = name[11:16]
library("reshape2")
a = melt(compb)
b=melt(myb)
c = rbind(a,b)
c = c[,-1]
# c = as.matrix(c)
if(is.null(data_comb)){
data_comb = c
}else{
data_comb = cbind(data_comb,c[,2])
}
}
# colnames(data) = c("Methods", "Accuracy")
num = 0
for (i in 1:(length(result[[4]]))){
num[i+1] = num[i] + dim(result[[4]][[i]])[1]
}
num = num[-1]
library(ggplot2) #注释：package在使用之前需要调用
# selind = c(1:num[11],(num[12]+1):num[13],(num[15]+1):num[16])
# selind = c(1:num[10],(num[12]+1):num[14],(num[15]+1):num[16])
selind = c(1:num[16])
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,2])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
#
p1 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="true positive rate",title="m=n=5")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(axis.text.x = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,3])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p2 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=5, n=10")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,4])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p3 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=5, n=15")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,5])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p4 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=5, n=20")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,6])
p5 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="true positive rate",title="m=n=10")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,7])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p6 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=n=15")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,8])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p7 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=n=20")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,9])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p8 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=n=25")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
# theme(legend.position="none")+
theme(text = element_text(family = "serif"))
library("ggpubr")
ggarrange(p1, p2, p3, p4, p5, p6, p7, p8,  ncol=4, nrow=2,labels = c("A", "B","C", "D","E", "F","G", "H"), common.legend = TRUE, legend="right")
# name = ls(result[[4]])
name = c("monocle","SCDE","MAST","DESeq","Limma","edgeR","ttest","ttestR","Welch","WMW","WMW-A-G","WMW-A-GMM",
"WMW-A-NB","WMW-A-NBM","WMW-A(normalized)","WMW-A(count)")
data_comb = NULL
for(r in 1:8){
compb = matrix(NA, ncol=10,nrow = 92)
for (i in 1:10){
comp = matrix(unlist(result[["rate3"]][[i]][,r]), ncol=1)
compb[,i] = comp
}
colnames(compb) = name[1:10]
myb= matrix(NA, ncol=6,nrow = 100)
for (i in 11:16){
my = matrix(unlist(result[["rate3"]][[i]][,r]), ncol=1)
myb[,i-10] = my
}
colnames(myb) = name[11:16]
library("reshape2")
a = melt(compb)
b=melt(myb)
c = rbind(a,b)
c = c[,-1]
# c = as.matrix(c)
if(is.null(data_comb)){
data_comb = c
}else{
data_comb = cbind(data_comb,c[,2])
}
}
num = 0
for (i in 1:(length(result[[4]]))){
num[i+1] = num[i] + dim(result[[4]][[i]])[1]
}
num = num[-1]
library(ggplot2) #注释：package在使用之前需要调用
# selind = c(1:num[11],(num[12]+1):num[13],(num[15]+1):num[16])
# selind = c(1:num[10],(num[12]+1):num[14],(num[15]+1):num[16])
selind = c(1:num[16])
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,2])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
#
p1 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="true positive rate",title="m=n=5")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(axis.text.x = element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,3])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p2 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=5, n=10")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,4])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p3 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=5, n=15")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,5])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p4 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=5, n=20")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,6])
p5 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="true positive rate",title="m=n=10")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,7])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p6 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=n=15")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,8])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p7 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=n=20")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
#theme(legend.position="none")+
theme(text = element_text(family = "serif"))
data = data.frame(Methods = data_comb[selind,1], Accuracy = data_comb[selind,9])
#注释：此处dose可用你的变量名称替换，$表示取数据集里的某一个元素
data$Methods <- as.factor(data$Methods)
p8 <- ggplot(data, aes(x=Methods, y=Accuracy),color=Methods) +
geom_boxplot(aes(fill=Methods)) +
labs(x="", y="", title="m=n=25")+
# theme(axis.text.x=element_text(angle=50,hjust=0.5, vjust=0.5)) +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_blank())+
# theme(legend.position="none")+
theme(text = element_text(family = "serif"))
library("ggpubr")
ggarrange(p1, p2, p3, p4, p5, p6, p7, p8,  ncol=4, nrow=2,labels = c("A", "B","C", "D","E", "F","G", "H"), common.legend = TRUE, legend="right")
(p1|p2|p3|p4)/(p5|p6|p7|p8)
ggarrange(p1, p2, p3, p4, p5, p6, p7, p8,  ncol=4, nrow=2,common.legend = TRUE, legend="right")
ggarrange(p1, p2, p3, p4, p5, p6, p7, p8,  ncol=4, nrow=2,labels = "A", common.legend = TRUE, legend="right")
View(data)
